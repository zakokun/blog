<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on 杂鱼君的博客1</title>
    <link>https://blog.zakokun.com/tags/performance/</link>
    <description>Recent content in performance on 杂鱼君的博客1</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 17 Jul 2017 22:40:28 +0000</lastBuildDate><atom:link href="https://blog.zakokun.com/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 force index 调教 MySQL 查询优化器</title>
      <link>https://blog.zakokun.com/2017/use-force-index/</link>
      <pubDate>Mon, 17 Jul 2017 22:40:28 +0000</pubDate>
      
      <guid>https://blog.zakokun.com/2017/use-force-index/</guid>
      <description>&lt;p&gt;mysql 有查询优化器，在我们发起一个查询的时候， msql 会尝试分析他，看看是否能做一些优化手段来加快查询速度。最常见的比如说有个 (a,b)的联合索引，无论我们使用&lt;code&gt;SELECT * FROM t WHERE a=? AND b=?&lt;/code&gt;还是&lt;code&gt;SELECT * FROM t WHERE b=? AND a=?&lt;/code&gt;都能利用到&lt;code&gt;(a,b)&lt;/code&gt;这个联合索引，又或者是在很多复杂的查询条件中，分析出使用哪个索引能最大化查询速度，这都是查询优化器做的事情。&lt;/p&gt;

&lt;p&gt;然而毕竟程序是死的，有的时候查询优化器并不如我们想象中的那么聪明。这时候就需要我们强制 mysql 按照我们的意愿去查询了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go 语言中哪种字符串拼接的方式最高效?</title>
      <link>https://blog.zakokun.com/2017/go-string-implode-diff-way/</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zakokun.com/2017/go-string-implode-diff-way/</guid>
      <description>&lt;p&gt;go 语言中字符串拼接有好几种方式,从最普通的&lt;code&gt;+&lt;/code&gt;拼接到&lt;code&gt;buffer&lt;/code&gt;字节缓冲都有.但是如果遇到大量的字符串拼接的情况,他们之间的性能差异还是需要注意的.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 http_load 测试服务器的负载</title>
      <link>https://blog.zakokun.com/2016/linux-pressure-testing-tool/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zakokun.com/2016/linux-pressure-testing-tool/</guid>
      <description>&lt;p&gt;http_load是一款linux,OSX下的性能检测工具,通过简单的参数就能测试Web服务器的负载和性能.对于日常的代码自测已经足够了.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
