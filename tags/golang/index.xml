<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 杂鱼君的博客1</title>
    <link>https://blog.zakokun.com/tags/golang/</link>
    <description>Recent content in golang on 杂鱼君的博客1</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 29 Sep 2020 15:58:08 +0800</lastBuildDate><atom:link href="https://blog.zakokun.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>又又改了一下博客的架构</title>
      <link>https://blog.zakokun.com/2020/change-blog-struct-again/</link>
      <pubDate>Tue, 29 Sep 2020 15:58:08 +0800</pubDate>
      
      <guid>https://blog.zakokun.com/2020/change-blog-struct-again/</guid>
      <description>干啥啥不行，重构第一名。 惊觉一年多没写博客了，惭愧。最近大半年做了挺多东西，想写的主题也有很多。奈何「动物森友会」「塞尔达传说旷野之息」「怪</description>
    </item>
    
    <item>
      <title>使用 singleflight 代替传统的并发锁</title>
      <link>https://blog.zakokun.com/2017/use-singleflight-instead-lock/</link>
      <pubDate>Mon, 12 Jun 2017 17:39:20 +0000</pubDate>
      
      <guid>https://blog.zakokun.com/2017/use-singleflight-instead-lock/</guid>
      <description>&lt;p&gt;一般来说高并发，或者 sql 查询很重的业务，缓存都是少不了的。业务代码中，读取缓存的时候一般会这样处理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data = getCache(key)
if !data {
    data = selectDB(key)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是有些时候光做缓存还是不够，我们还要担心缓存失效导致的集中查 DB 的问题，这时候就需要考虑加锁的问题了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go 语言中哪种字符串拼接的方式最高效?</title>
      <link>https://blog.zakokun.com/2017/go-string-implode-diff-way/</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zakokun.com/2017/go-string-implode-diff-way/</guid>
      <description>&lt;p&gt;go 语言中字符串拼接有好几种方式,从最普通的&lt;code&gt;+&lt;/code&gt;拼接到&lt;code&gt;buffer&lt;/code&gt;字节缓冲都有.但是如果遇到大量的字符串拼接的情况,他们之间的性能差异还是需要注意的.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过带缓冲的channel来控制并发数</title>
      <link>https://blog.zakokun.com/2017/goroutinue-number-control/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zakokun.com/2017/goroutinue-number-control/</guid>
      <description>&lt;p&gt;最近和搜索的同事一起用 golang 重构他们的 Elasticsearch 客户端.在用 Goroutines 去异步更新索引的时候并发量太大导致 ES
进程挂掉的情况(真弱).因此在更新索引的时候考虑如何手动控制并发的协程数量.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phper 学 golang --日期时间处理</title>
      <link>https://blog.zakokun.com/2016/golang-time-package/</link>
      <pubDate>Mon, 18 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zakokun.com/2016/golang-time-package/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
